module ppidd
! deliberately expose iso_c_binding when including ppidd module for convenience of the module user
use iso_c_binding

integer(c_int), parameter :: PPIDD_FORTINT=0
integer(c_int), parameter :: PPIDD_DOUBLE =1

integer(c_int), parameter :: PPIDD_IMPL_NO_MPI =1
integer(c_int), parameter :: PPIDD_IMPL_GA_MPI =2
integer(c_int), parameter :: PPIDD_IMPL_MPI2   =3
integer(c_int), parameter :: PPIDD_IMPL_DEFAULT=@PPIDD_IMPL_DEFAULT@

interface
 subroutine ppidd_initialize(argc,argv,impl) bind(c,name="PPIDD_Initialize")
 use iso_c_binding, only: c_int, c_ptr
 integer(c_int), intent(in)         :: argc
 type(c_ptr), intent(in)            :: argv
 integer(c_int), intent(in), value  :: impl
 end subroutine ppidd_initialize
end interface

interface
 subroutine ppidd_initialize_data() bind(C,name='PPIDD_Initialize_data')
 end subroutine ppidd_initialize_data
end interface

interface
 function ppidd_worker_comm() bind(C,name='PPIDD_Worker_comm')
 use iso_c_binding, only : c_int64_t
 integer(c_int64_t) :: ppidd_worker_comm
 end function ppidd_worker_comm
end interface

interface
 subroutine ppidd_finalize() bind(C,name='PPIDD_Finalize')
 end subroutine ppidd_finalize
end interface

interface
 function ppidd_uses_ma() bind(C,name='PPIDD_Uses_ma')
 use iso_c_binding, only : c_int
 integer(c_int) :: ppidd_uses_ma
 end function ppidd_uses_ma
end interface

interface
 function ppidd_ma_init(dtype,stack,heap) bind(C,name='PPIDD_MA_init')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                     :: ppidd_ma_init
 integer(c_int), intent(in), value  :: dtype
 integer(c_int64_t), intent(in)     :: stack
 integer(c_int64_t), intent(in)     :: heap
 end function ppidd_ma_init
end interface

interface
 function ppidd_wtime() bind(C,name='PPIDD_Wtime')
 use iso_c_binding, only : c_double
 real(c_double) :: ppidd_wtime
 end function ppidd_wtime
end interface

interface
 subroutine ppidd_error(message,code) bind(C,name='PPIDD_Error')
 use iso_c_binding, only : c_int, c_char
 character(c_char), intent(in) :: message ! must to terminated by c_null_char
 integer(c_int), intent(in), value :: code
 end subroutine ppidd_error
end interface

interface
 subroutine ppidd_helper_server(flag,numprocs_per_server) bind(C,name='PPIDD_Helper_server')
 use iso_c_binding, only : c_int
 integer(c_int), intent(in), value :: flag, numprocs_per_server
 end subroutine ppidd_helper_server
end interface

interface
 function ppidd_size_all() bind(C,name='PPIDD_Size_all')
 use iso_c_binding, only : c_int
 integer(c_int) :: ppidd_size_all
 end function ppidd_size_all
end interface

interface
 function ppidd_size() bind(C,name='PPIDD_Size')
 use iso_c_binding, only : c_int
 integer(c_int) :: ppidd_size
 end function ppidd_size
end interface

interface
 function ppidd_rank() bind(C,name='PPIDD_Rank')
 use iso_c_binding, only : c_int
 integer(c_int) :: ppidd_rank
 end function ppidd_rank
end interface

interface
 subroutine ppidd_init_fence() bind(C,name='PPIDD_Init_fence')
 end subroutine ppidd_init_fence
end interface

interface
 subroutine ppidd_fence() bind(C,name='PPIDD_Fence')
 end subroutine ppidd_fence
end interface

interface
 subroutine ppidd_send(buf,count,dtype,dest,sync) bind(C,name='PPIDD_Send')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 type(c_ptr), intent(in), value :: buf ! call ppidd_send(c_loc(f_buffer),...)
 integer(c_int64_t), intent(in)        :: count
 integer(c_int),     intent(in), value :: dtype
 integer(c_int64_t), intent(in)        :: dest
 integer(c_int), intent(in), value     :: sync
 end subroutine ppidd_send
end interface

interface
 subroutine ppidd_recv(buf,count,dtype,source,lenreal,sourcereal,sync) bind(C,name='PPIDD_Recv')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 type(c_ptr), intent(in), value         :: buf ! call ppidd_recv(c_loc(f_buffer),...)
 integer(c_int64_t), intent(in)         :: count
 integer(c_int),     intent(in), value  :: dtype
 integer(c_int64_t), intent(in)         :: source
 integer(c_int64_t), intent(out)        :: lenreal
 integer(c_int64_t), intent(out)        :: sourcereal
 integer(c_int), intent(in), value      :: sync
 end subroutine ppidd_recv
end interface

interface
 subroutine ppidd_wait() bind(C,name='PPIDD_Wait')
 end subroutine ppidd_wait
end interface

interface
 function ppidd_iprobe(tag,source) bind(C,name='PPIDD_Iprobe')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                  :: ppidd_iprobe
 integer(c_int), intent(in), value :: tag
 integer(c_int64_t), intent(in)  :: source
 end function ppidd_iprobe
end interface

interface
 subroutine ppidd_bcast(buffer,count,dtype,root) bind(C,name='PPIDD_BCast')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 type(c_ptr),        intent(in), value :: buffer ! call ppidd_bcast(c_loc(f_buffer),...)
 integer(c_int64_t), intent(in)        :: count
 integer(c_int),     intent(in), value :: dtype
 integer(c_int), intent(in), value     :: root
 end subroutine ppidd_bcast
end interface

interface
 subroutine ppidd_barrier() bind(C,name='PPIDD_Barrier')
 end subroutine ppidd_barrier
end interface

interface
 subroutine ppidd_gsum(dtype,buffer,len,op) bind(C,name='PPIDD_Gsum')
 use iso_c_binding, only : c_int, c_int64_t, c_char, c_ptr
 integer(c_int),     intent(in), value :: dtype
 type(c_ptr),        intent(in), value :: buffer ! call ppidd_gsum(c_loc(f_buffer),...)
 integer(c_int),     intent(in), value :: len
 character(c_char),  intent(in)        :: op ! must to terminated by c_null_char
 end subroutine ppidd_gsum
end interface

interface
 function ppidd_create_irreg(name,lenin,nchunk,dtype,storetype,handle) bind(C,name='PPIDD_Create_irreg')
 use iso_c_binding, only : c_int, c_int64_t, c_char
 integer(c_int)                        :: ppidd_create_irreg
 character(c_char),  intent(in)        :: name ! must to terminated by c_null_char
 integer(c_int64_t), intent(in), value :: nchunk
 integer(c_int64_t), intent(in)        :: lenin(nchunk)
 integer(c_int),     intent(in), value :: dtype
 integer(c_int),     intent(in), value :: storetype
 integer(c_int64_t), intent(out)       :: handle
 end function ppidd_create_irreg
end interface

interface
 function ppidd_create(name,lentot,dtype,storetype,handle) bind(C,name='PPIDD_Create')
 use iso_c_binding, only : c_int, c_int64_t, c_char
 integer(c_int)                        :: ppidd_create
 character(c_char),  intent(in)        :: name ! must to terminated by c_null_char
 integer(c_int64_t), intent(in), value :: lentot
 integer(c_int),     intent(in), value :: dtype
 integer(c_int),     intent(in), value :: storetype
 integer(c_int64_t), intent(out)       :: handle
 end function ppidd_create
end interface

interface
 function ppidd_destroy(handle) bind(C,name='PPIDD_Destroy')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                 :: ppidd_destroy
 integer(c_int64_t), intent(in) :: handle
 end function ppidd_destroy
end interface

interface
 function ppidd_distrib(handle,rank,ilo,ihi) bind(C,name='PPIDD_Distrib')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                  :: ppidd_distrib
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int), intent(in), value :: rank
 integer(c_int64_t), intent(out) :: ilo
 integer(c_int64_t), intent(out) :: ihi
 end function ppidd_distrib
end interface

interface
 function ppidd_location(handle,ilo,ihi,map,proclist,np) bind(C,name='PPIDD_Location')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 integer(c_int)                  :: ppidd_location
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int64_t), intent(in)  :: ilo
 integer(c_int64_t), intent(in)  :: ihi
 type(c_ptr), intent(in), value  :: map      ! call ppidd_location(...,c_loc(f_map),...)
 type(c_ptr), intent(in), value  :: proclist ! call ppidd_location(...,c_loc(f_proclist),...)
 integer(c_int), intent(out) :: np
 end function ppidd_location
end interface

interface
 function ppidd_get(handle,ilo,ihi,buff) bind(C,name='PPIDD_Get')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 integer(c_int)                 :: ppidd_get
 integer(c_int64_t), intent(in) :: handle
 integer(c_int64_t), intent(in) :: ilo
 integer(c_int64_t), intent(in) :: ihi
 type(c_ptr), intent(in), value :: buff ! call ppidd_get(...,c_loc(f_buff),...)
 end function ppidd_get
end interface

interface
 function ppidd_put(handle,ilo,ihi,buff) bind(C,name='PPIDD_Put')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 integer(c_int)                 :: ppidd_put
 integer(c_int64_t), intent(in) :: handle
 integer(c_int64_t), intent(in) :: ilo
 integer(c_int64_t), intent(in) :: ihi
 type(c_ptr), intent(in), value :: buff ! call ppidd_put(...,c_loc(f_buff),...)
 end function ppidd_put
end interface

interface
 function ppidd_acc(handle,ilo,ihi,buff,fac) bind(C,name='PPIDD_Acc')
 use iso_c_binding, only : c_int, c_int64_t, c_ptr
 integer(c_int)                 :: ppidd_acc
 integer(c_int64_t), intent(in) :: handle
 integer(c_int64_t), intent(in) :: ilo
 integer(c_int64_t), intent(in) :: ihi
 type(c_ptr), intent(in), value :: buff ! call ppidd_acc(...,c_loc(f_buff),...)
 type(c_ptr), intent(in), value :: fac  ! call ppidd_acc(...,c_loc(f_fac),...)
 end function ppidd_acc
end interface

interface
 subroutine ppidd_read_inc(handle,inum,incr,returnval) bind(C,name='PPIDD_Read_inc')
 use iso_c_binding, only : c_int64_t
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int64_t), intent(in)  :: inum
 integer(c_int64_t), intent(in)  :: incr
 integer(c_int64_t), intent(out) :: returnval
 end subroutine ppidd_read_inc
end interface

interface
 subroutine ppidd_zero_patch(handle,ilo,ihi) bind(C,name='PPIDD_Zero_patch')
 use iso_c_binding, only : c_int64_t
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int64_t), intent(in)  :: ilo
 integer(c_int64_t), intent(in)  :: ihi
 end subroutine ppidd_zero_patch
end interface

interface
 function ppidd_zero(handle) bind(C,name='PPIDD_Zero')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                 :: ppidd_zero
 integer(c_int64_t), intent(in) :: handle
 end function ppidd_zero
end interface

interface
 subroutine ppidd_nxtval(numproc,val) bind(C,name='PPIDD_Nxtval')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int), intent(in), value  :: numproc
 integer(c_int64_t), intent(out) :: val
 end subroutine ppidd_nxtval
end interface

interface
 subroutine ppidd_duplicate(handlei,handlej,name) bind(C,name='PPIDD_Duplicate')
 use iso_c_binding, only : c_int64_t, c_char
 integer(c_int64_t), intent(in)  :: handlei
 integer(c_int64_t), intent(out) :: handlej
 character(c_char),  intent(in)  :: name ! must to terminated by c_null_char
 end subroutine ppidd_duplicate
end interface

interface
 subroutine ppidd_inquire_name(handle,name) bind(C,name='PPIDD_Inquire_name')
 use iso_c_binding, only : c_int64_t, c_char
 integer(c_int64_t), intent(in)  :: handle
 character(c_char),  intent(out) :: name ! must to terminated by c_null_char
 end subroutine ppidd_inquire_name
end interface

interface
 function ppidd_inquire_stype(handle) bind(C,name='PPIDD_Inquire_stype')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int) ppidd_inquire_stype
 integer(c_int64_t), intent(in)  :: handle
 end function ppidd_inquire_stype
end interface

interface
 subroutine ppidd_inquire_mem(mem_used) bind(C,name='PPIDD_Inquire_mem')
 use iso_c_binding, only : c_int64_t
 integer(c_int64_t), intent(out) :: mem_used
 end subroutine ppidd_inquire_mem
end interface

interface
 function ppidd_create_mutexes(storetype,number) bind(C,name='PPIDD_Create_mutexes')
 use iso_c_binding, only : c_int
 integer(c_int)  ppidd_create_mutexes
 integer(c_int), intent(in), value :: storetype, number
 end function ppidd_create_mutexes
end interface

interface
 subroutine ppidd_lock_mutex(inum) bind(C,name='PPIDD_Lock_mutex')
 use iso_c_binding, only : c_int
 integer(c_int), intent(in), value :: inum
 end subroutine ppidd_lock_mutex
end interface

interface
 subroutine ppidd_unlock_mutex(inum) bind(C,name='PPIDD_Unlock_mutex')
 use iso_c_binding, only : c_int
 integer(c_int), intent(in), value :: inum
 end subroutine ppidd_unlock_mutex
end interface

interface
 function ppidd_destroy_mutexes() bind(C,name='PPIDD_Destroy_mutexes')
 use iso_c_binding, only : c_int
 integer(c_int) :: ppidd_destroy_mutexes
 end function ppidd_destroy_mutexes
end interface

interface
 function ppidd_sf_create(name,size_hard_limit,size_soft_limit,req_size,handle) bind(C,name='PPIDD_Sf_create')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_char
 integer(c_int)                  :: ppidd_sf_create
 character(c_char),  intent(in)  :: name ! must to terminated by c_null_char
 real(c_double),     intent(in)  :: size_hard_limit
 real(c_double),     intent(in)  :: size_soft_limit
 real(c_double),     intent(in)  :: req_size
 integer(c_int64_t), intent(out) :: handle
 end function ppidd_sf_create
end interface

interface
 function ppidd_sf_write(handle,byte_offset,byte_length,buff,request_id) bind(C,name='PPIDD_Sf_write')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int)                  :: ppidd_sf_write
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 real(c_double),     intent(in)  :: byte_length
 type(c_ptr), intent(in), value  :: buff ! call ppidd_sf_write(c_loc(f_buff),...)
 integer(c_int64_t), intent(out) :: request_id
 end function ppidd_sf_write
end interface

interface
 function ppidd_sf_read(handle,byte_offset,byte_length,buff,request_id) bind(C,name='PPIDD_Sf_read')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int)                  :: ppidd_sf_read
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 real(c_double),     intent(in)  :: byte_length
 type(c_ptr), intent(in), value  :: buff ! call ppidd_sf_read(c_loc(f_buff),...)
 integer(c_int64_t), intent(out) :: request_id
 end function ppidd_sf_read
end interface

interface
 function ppidd_sf_wait(request_id) bind(C,name='PPIDD_Sf_wait')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                 :: ppidd_sf_wait
 integer(c_int64_t), intent(in) :: request_id
 end function ppidd_sf_wait
end interface

interface
 function ppidd_sf_waitall(list,num) bind(C,name='PPIDD_Sf_waitall')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                 :: ppidd_sf_waitall
 integer(c_int), intent(in), value :: num
 integer(c_int64_t), intent(in) :: list(num)
 end function ppidd_sf_waitall
end interface

interface
 function ppidd_sf_destroy(handle) bind(C,name='PPIDD_Sf_destroy')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int)                 :: ppidd_sf_destroy
 integer(c_int64_t), intent(in) :: handle
 end function ppidd_sf_destroy
end interface

interface
 subroutine ppidd_sf_errmsg(code,message) bind(C,name='PPIDD_Sf_errmsg')
 use iso_c_binding, only : c_int, c_char
 integer(c_int),    intent(in)  :: code
 character(c_char), intent(out) :: message ! must to terminated by c_null_char
 end subroutine ppidd_sf_errmsg
end interface

interface
 function ppidd_eaf_open(name,type,handle) bind(C,name='PPIDD_Eaf_open')
 use iso_c_binding, only : c_int, c_int64_t, c_char
 character(c_char),  intent(in)  :: name ! must to terminated by c_null_char
 integer(c_int), intent(in), value  :: type
 integer(c_int64_t), intent(out) :: handle
 integer(c_int)                  :: ppidd_eaf_open
 end function ppidd_eaf_open
end interface

interface
 function ppidd_eaf_write(handle,byte_offset,buff,byte_length) bind(C,name='PPIDD_Eaf_write')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 type(c_ptr), intent(in), value  :: buff ! call ppidd_eaf_write(c_loc(f_buff),...)
 integer(c_int64_t), intent(in)  :: byte_length
 integer(c_int)                  :: ppidd_eaf_write
 end function ppidd_eaf_write
end interface

interface
 function ppidd_eaf_awrite(handle,byte_offset,buff,byte_length,request_id) bind(C,name='PPIDD_Eaf_awrite')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 type(c_ptr), intent(in), value  :: buff ! call ppidd_eaf_awrite(c_loc(f_buff),...)
 integer(c_int64_t), intent(in)  :: byte_length
 integer(c_int64_t), intent(out) :: request_id
 integer(c_int)                  :: ppidd_eaf_awrite
 end function ppidd_eaf_awrite
end interface

interface
 function ppidd_eaf_read(handle,byte_offset,buff,byte_length) bind(C,name='PPIDD_Eaf_read')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 type(c_ptr), intent(in), value  :: buff ! call ppidd_eaf_read(c_loc(f_buff),...)
 integer(c_int64_t), intent(in)  :: byte_length
 integer(c_int)                  :: ppidd_eaf_read
 end function ppidd_eaf_read
end interface

interface
 function ppidd_eaf_aread(handle,byte_offset,buff,byte_length,request_id) bind(C,name='PPIDD_Eaf_aread')
 use iso_c_binding, only : c_double, c_int, c_int64_t, c_ptr
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(in)  :: byte_offset
 type(c_ptr), intent(in), value  :: buff ! call ppidd_eaf_aread(c_loc(f_buff),...)
 integer(c_int64_t), intent(in)  :: byte_length
 integer(c_int64_t), intent(out) :: request_id
 integer(c_int)                  :: ppidd_eaf_aread
 end function ppidd_eaf_aread
end interface

interface
 function ppidd_eaf_wait(handle,request_id) bind(C,name='PPIDD_Eaf_wait')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int64_t), intent(in)  :: request_id
 integer(c_int)                  :: ppidd_eaf_wait
 end function ppidd_eaf_wait
end interface

interface
 function ppidd_eaf_waitall(list,num) bind(C,name='PPIDD_Eaf_waitall')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int), intent(in), value :: num
 integer(c_int64_t), intent(in)  :: list(num)
 integer(c_int)                  :: ppidd_eaf_waitall
 end function ppidd_eaf_waitall
end interface

interface
 function ppidd_eaf_probe(request_id,status) bind(C,name='PPIDD_Eaf_probe')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int64_t), intent(in)  :: request_id
 integer(c_int), intent(out) :: status
 integer(c_int)                  :: ppidd_eaf_probe
 end function ppidd_eaf_probe
end interface

interface
 function ppidd_eaf_close(handle) bind(C,name='PPIDD_Eaf_close')
 use iso_c_binding, only : c_int, c_int64_t
 integer(c_int64_t), intent(in)  :: handle
 integer(c_int)                  :: ppidd_eaf_close
 end function ppidd_eaf_close
end interface

interface
 function ppidd_eaf_delete(name) bind(C,name='PPIDD_Eaf_delete')
 use iso_c_binding, only : c_char, c_int
 character(c_char),  intent(in)  :: name ! must to terminated by c_null_char
 integer(c_int)                  :: ppidd_eaf_delete
 end function ppidd_eaf_delete
end interface

interface
 function ppidd_eaf_length(handle,fsize) bind(C,name='PPIDD_Eaf_length')
 use iso_c_binding, only : c_double, c_int, c_int64_t
 integer(c_int64_t), intent(in)  :: handle
 real(c_double),     intent(out) :: fsize
 integer(c_int)                  :: ppidd_eaf_length
 end function ppidd_eaf_length
end interface

interface
 function ppidd_eaf_truncate(handle,offset) bind(C,name='PPIDD_Eaf_truncate')
 use iso_c_binding, only : c_double, c_int, c_int64_t
 integer(c_int64_t), intent(in) :: handle
 real(c_double), intent(in) :: offset
 integer(c_int) :: ppidd_eaf_truncate
 end function ppidd_eaf_truncate
end interface

interface
 subroutine ppidd_eaf_errmsg(code,message) bind(C,name='PPIDD_Eaf_errmsg')
 use iso_c_binding, only : c_int, c_char
 integer(c_int),    intent(in)  :: code
 character(c_char), intent(out) :: message ! must to terminated by c_null_char
 end subroutine ppidd_eaf_errmsg
end interface

end module ppidd
