module ppidd
! deliberately expose iso_c_binding when including ppidd module for convenience of the module user
use iso_c_binding

integer(c_int), parameter :: PPIDD_FORTINT=0
integer(c_int), parameter :: PPIDD_DOUBLE =1

integer(c_int), parameter :: PPIDD_IMPL_NO_MPI =1
integer(c_int), parameter :: PPIDD_IMPL_GA     =2
integer(c_int), parameter :: PPIDD_IMPL_MPI    =3
integer(c_int), parameter :: PPIDD_IMPL_DEFAULT=@PPIDD_IMPL_DEFAULT@

interface
 subroutine ppidd_initialize(argc, argv, impl, fortint_size) bind(c, name='PPIDD_Initialize')
 use iso_c_binding, only: c_int, c_ptr
 integer(c_int), intent(in) :: argc
 type(c_ptr), intent(in) :: argv
 integer(c_int), intent(in), value :: impl, fortint_size
 end subroutine ppidd_initialize
end interface

interface
 subroutine ppidd_initialize_data() bind(c, name='PPIDD_Initialize_data')
 end subroutine ppidd_initialize_data
end interface

interface
 function ppidd_worker_comm() bind(c, name='PPIDD_Worker_comm')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_worker_comm
 end function ppidd_worker_comm
end interface

interface
 subroutine ppidd_finalize() bind(c, name='PPIDD_Finalize')
 end subroutine ppidd_finalize
end interface

interface
 function ppidd_uses_ma() bind(c, name='PPIDD_Uses_ma')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_uses_ma
 end function ppidd_uses_ma
end interface

interface
 function ppidd_ma_init(dtype, stack, heap) bind(c, name='PPIDD_MA_init')
 use iso_c_binding, only: c_int, c_int64_t
 integer(c_int) ppidd_ma_init
 integer(c_int), intent(in), value :: dtype
 integer(c_int64_t), intent(in), value :: stack, heap
 end function ppidd_ma_init
end interface

interface
 function ppidd_wtime() bind(c, name='PPIDD_Wtime')
 use iso_c_binding, only: c_double
 real(c_double) ppidd_wtime
 end function ppidd_wtime
end interface

interface
 subroutine ppidd_error(message, code) bind(c, name='PPIDD_Error')
 use iso_c_binding, only: c_int, c_char
 character(c_char), intent(in) :: message ! must be terminated by c_null_char
 integer(c_int), intent(in), value :: code
 end subroutine ppidd_error
end interface

interface
 subroutine ppidd_helper_server(flag, numprocs_per_server) bind(c, name='PPIDD_Helper_server')
 use iso_c_binding, only: c_int
 integer(c_int), intent(in), value :: flag, numprocs_per_server
 end subroutine ppidd_helper_server
end interface

interface
 function ppidd_size_all() bind(c, name='PPIDD_Size_all')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_size_all
 end function ppidd_size_all
end interface

interface
 function ppidd_size() bind(c, name='PPIDD_Size')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_size
 end function ppidd_size
end interface

interface
 function ppidd_rank() bind(c, name='PPIDD_Rank')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_rank
 end function ppidd_rank
end interface

interface
 subroutine ppidd_init_fence() bind(c, name='PPIDD_Init_fence')
 end subroutine ppidd_init_fence
end interface

interface
 subroutine ppidd_fence() bind(c, name='PPIDD_Fence')
 end subroutine ppidd_fence
end interface

interface
 subroutine ppidd_send(buf, count, dtype, dest, sync) bind(c, name='PPIDD_Send')
 use iso_c_binding, only: c_int, c_ptr
 type(c_ptr), intent(in), value :: buf ! call ppidd_send(c_loc(f_buffer), ...)
 integer(c_int), intent(in), value :: count, dtype, dest, sync
 end subroutine ppidd_send
end interface

interface
 subroutine ppidd_recv(buf, count, dtype, source, lenreal, sourcereal, sync) bind(c, name='PPIDD_Recv')
 use iso_c_binding, only: c_int, c_ptr
 type(c_ptr), intent(in), value :: buf ! call ppidd_recv(c_loc(f_buffer), ...)
 integer(c_int), intent(in), value :: count, dtype, source, sync
 integer(c_int), intent(out) :: lenreal, sourcereal
 end subroutine ppidd_recv
end interface

interface
 subroutine ppidd_wait() bind(c, name='PPIDD_Wait')
 end subroutine ppidd_wait
end interface

interface
 function ppidd_iprobe(tag, source) bind(c, name='PPIDD_Iprobe')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_iprobe
 integer(c_int), intent(in), value :: tag, source
 end function ppidd_iprobe
end interface

interface
 subroutine ppidd_bcast(buffer, count, dtype, root) bind(c, name='PPIDD_BCast')
 use iso_c_binding, only: c_int, c_int64_t, c_ptr
 type(c_ptr), intent(in), value :: buffer ! call ppidd_bcast(c_loc(f_buffer), ...)
 integer(c_int), intent(in), value :: count, dtype, root
 end subroutine ppidd_bcast
end interface

interface
 subroutine ppidd_barrier() bind(c, name='PPIDD_Barrier')
 end subroutine ppidd_barrier
end interface

interface
 subroutine ppidd_gsum(dtype, buffer, len, op) bind(c, name='PPIDD_Gsum')
 use iso_c_binding, only: c_int, c_int64_t, c_char, c_ptr
 integer(c_int), intent(in), value :: dtype, len
 type(c_ptr), intent(in), value :: buffer ! call ppidd_gsum(c_loc(f_buffer), ...)
 character(c_char), intent(in) :: op ! must be terminated by c_null_char
 end subroutine ppidd_gsum
end interface

interface
 function ppidd_create_irreg(name, lenin, nchunk, dtype, storetype, handle) bind(c, name='PPIDD_Create_irreg')
 use iso_c_binding, only: c_int, c_int64_t, c_char
 integer(c_int) ppidd_create_irreg
 character(c_char), intent(in) :: name ! must be terminated by c_null_char
 integer(c_int64_t), intent(in), value :: nchunk
 integer(c_int64_t), intent(in) :: lenin(nchunk)
 integer(c_int), intent(in), value :: dtype, storetype
 integer(c_int), intent(out) :: handle
 end function ppidd_create_irreg
end interface

interface
 function ppidd_create(name, lentot, dtype, storetype, handle) bind(c, name='PPIDD_Create')
 use iso_c_binding, only: c_int, c_int64_t, c_char
 integer(c_int) ppidd_create
 character(c_char), intent(in) :: name ! must be terminated by c_null_char
 integer(c_int64_t), intent(in), value :: lentot
 integer(c_int), intent(in), value :: dtype, storetype
 integer(c_int), intent(out) :: handle
 end function ppidd_create
end interface

interface
 function ppidd_destroy(handle) bind(c, name='PPIDD_Destroy')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_destroy
 integer(c_int), intent(in), value :: handle
 end function ppidd_destroy
end interface

interface
 function ppidd_distrib(handle, rank, ilo, ihi) bind(c, name='PPIDD_Distrib')
 use iso_c_binding, only: c_int, c_int64_t
 integer(c_int) ppidd_distrib
 integer(c_int), intent(in), value :: handle, rank
 integer(c_int64_t), intent(out) :: ilo, ihi
 end function ppidd_distrib
end interface

interface
 function ppidd_location(handle, ilo, ihi, map, proclist, np) bind(c, name='PPIDD_Location')
 use iso_c_binding, only: c_int, c_int64_t, c_ptr
 integer(c_int) ppidd_location
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: ilo, ihi
 type(c_ptr), intent(in), value :: map, proclist ! call ppidd_location(..., c_loc(f_map), ...)
 integer(c_int), intent(out) :: np
 end function ppidd_location
end interface

interface
 function ppidd_get(handle, ilo, ihi, buff) bind(c, name='PPIDD_Get')
 use iso_c_binding, only: c_int, c_int64_t, c_ptr
 integer(c_int) ppidd_get
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: ilo, ihi
 type(c_ptr), intent(in), value :: buff ! call ppidd_get(..., c_loc(f_buff), ...)
 end function ppidd_get
end interface

interface
 function ppidd_put(handle, ilo, ihi, buff) bind(c, name='PPIDD_Put')
 use iso_c_binding, only: c_int, c_int64_t, c_ptr
 integer(c_int) ppidd_put
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: ilo, ihi
 type(c_ptr), intent(in), value :: buff ! call ppidd_put(..., c_loc(f_buff), ...)
 end function ppidd_put
end interface

interface
 function ppidd_acc(handle, ilo, ihi, buff, fac) bind(c, name='PPIDD_Acc')
 use iso_c_binding, only: c_int, c_int64_t, c_ptr
 integer(c_int) ppidd_acc
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: ilo, ihi
 type(c_ptr), intent(in), value :: buff, fac ! call ppidd_acc(..., c_loc(f_buff), ...)
 end function ppidd_acc
end interface

interface
 function ppidd_read_inc(handle, inum, incr) bind(c, name='PPIDD_Read_inc')
 use iso_c_binding, only: c_int, c_int64_t
 integer(c_int64_t) ppidd_read_inc
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: inum, incr
 end function ppidd_read_inc
end interface

interface
 subroutine ppidd_zero_patch(handle, ilo, ihi) bind(c, name='PPIDD_Zero_patch')
 use iso_c_binding, only: c_int, c_int64_t
 integer(c_int), intent(in), value :: handle
 integer(c_int64_t), intent(in), value :: ilo, ihi
 end subroutine ppidd_zero_patch
end interface

interface
 function ppidd_zero(handle) bind(c, name='PPIDD_Zero')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_zero
 integer(c_int), intent(in), value :: handle
 end function ppidd_zero
end interface

interface
 function ppidd_nxtval(numproc) bind(c, name='PPIDD_Nxtval')
 use iso_c_binding, only: c_int, c_int64_t
 integer(c_int64_t) ppidd_nxtval
 integer(c_int), intent(in), value :: numproc
 end function ppidd_nxtval
end interface

interface
 subroutine ppidd_inquire_name(handle, name) bind(c, name='PPIDD_Inquire_name')
 use iso_c_binding, only: c_int, c_char
 integer(c_int), intent(in), value :: handle
 character(c_char), intent(out) :: name ! must be terminated by c_null_char
 end subroutine ppidd_inquire_name
end interface

interface
 function ppidd_inquire_stype(handle) bind(c, name='PPIDD_Inquire_stype')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_inquire_stype
 integer(c_int), intent(in), value :: handle
 end function ppidd_inquire_stype
end interface

interface
 function ppidd_inquire_mem() bind(c, name='PPIDD_Inquire_mem')
 use iso_c_binding, only: c_size_t
 integer(c_size_t) ppidd_inquire_mem
 end function ppidd_inquire_mem
end interface

interface
 function ppidd_create_mutexes(storetype, number) bind(c, name='PPIDD_Create_mutexes')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_create_mutexes
 integer(c_int), intent(in), value :: storetype, number
 end function ppidd_create_mutexes
end interface

interface
 subroutine ppidd_lock_mutex(inum) bind(c, name='PPIDD_Lock_mutex')
 use iso_c_binding, only: c_int
 integer(c_int), intent(in), value :: inum
 end subroutine ppidd_lock_mutex
end interface

interface
 subroutine ppidd_unlock_mutex(inum) bind(c, name='PPIDD_Unlock_mutex')
 use iso_c_binding, only: c_int
 integer(c_int), intent(in), value :: inum
 end subroutine ppidd_unlock_mutex
end interface

interface
 function ppidd_destroy_mutexes() bind(c, name='PPIDD_Destroy_mutexes')
 use iso_c_binding, only: c_int
 integer(c_int) :: ppidd_destroy_mutexes
 end function ppidd_destroy_mutexes
end interface

interface
 function ppidd_sf_create(name, size_hard_limit, size_soft_limit, req_size, handle) bind(c, name='PPIDD_Sf_create')
 use iso_c_binding, only: c_double, c_int, c_char
 integer(c_int) ppidd_sf_create
 character(c_char), intent(in) :: name ! must be terminated by c_null_char
 real(c_double), intent(in), value :: size_hard_limit, size_soft_limit, req_size
 integer(c_int), intent(out) :: handle
 end function ppidd_sf_create
end interface

interface
 function ppidd_sf_write(handle, byte_offset, byte_length, buff, request_id) bind(c, name='PPIDD_Sf_write')
 use iso_c_binding, only: c_double, c_int, c_ptr
 integer(c_int) ppidd_sf_write
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset, byte_length
 type(c_ptr), intent(in), value :: buff ! call ppidd_sf_write(c_loc(f_buff), ...)
 integer(c_int), intent(out) :: request_id
 end function ppidd_sf_write
end interface

interface
 function ppidd_sf_read(handle, byte_offset, byte_length, buff, request_id) bind(c, name='PPIDD_Sf_read')
 use iso_c_binding, only: c_double, c_int, c_ptr
 integer(c_int) ppidd_sf_read
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset, byte_length
 type(c_ptr), intent(in), value :: buff ! call ppidd_sf_read(c_loc(f_buff), ...)
 integer(c_int), intent(out) :: request_id
 end function ppidd_sf_read
end interface

interface
 function ppidd_sf_wait(request_id) bind(c, name='PPIDD_Sf_wait')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_sf_wait
 integer(c_int), intent(in), value :: request_id
 end function ppidd_sf_wait
end interface

interface
 function ppidd_sf_waitall(list, num) bind(c, name='PPIDD_Sf_waitall')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_sf_waitall
 integer(c_int), intent(in), value :: num
 integer(c_int), intent(in) :: list(num)
 end function ppidd_sf_waitall
end interface

interface
 function ppidd_sf_destroy(handle) bind(c, name='PPIDD_Sf_destroy')
 use iso_c_binding, only: c_int
 integer(c_int) :: ppidd_sf_destroy
 integer(c_int), intent(in), value :: handle
 end function ppidd_sf_destroy
end interface

interface
 subroutine ppidd_sf_errmsg(code, message) bind(c, name='PPIDD_Sf_errmsg')
 use iso_c_binding, only: c_int, c_char
 integer(c_int), intent(in), value :: code
 character(c_char), intent(out) :: message ! must be terminated by c_null_char
 end subroutine ppidd_sf_errmsg
end interface

interface
 function ppidd_eaf_open(name, type, handle) bind(c, name='PPIDD_Eaf_open')
 use iso_c_binding, only: c_int, c_char
 integer(c_int) ppidd_eaf_open
 character(c_char), intent(in) :: name ! must be terminated by c_null_char
 integer(c_int), intent(in), value :: type
 integer(c_int), intent(out) :: handle
 end function ppidd_eaf_open
end interface

interface
 function ppidd_eaf_write(handle, byte_offset, buff, byte_length) bind(c, name='PPIDD_Eaf_write')
 use iso_c_binding, only: c_double, c_int, c_size_t, c_ptr
 integer(c_int) ppidd_eaf_write
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset
 type(c_ptr), intent(in), value :: buff ! call ppidd_eaf_write(c_loc(f_buff), ...)
 integer(c_size_t), intent(in), value :: byte_length
 end function ppidd_eaf_write
end interface

interface
 function ppidd_eaf_awrite(handle, byte_offset, buff, byte_length, request_id) bind(c, name='PPIDD_Eaf_awrite')
 use iso_c_binding, only: c_double, c_int, c_size_t, c_ptr
 integer(c_int) ppidd_eaf_awrite
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset
 type(c_ptr), intent(in), value :: buff ! call ppidd_eaf_awrite(c_loc(f_buff), ...)
 integer(c_size_t), intent(in), value :: byte_length
 integer(c_int), intent(out) :: request_id
 end function ppidd_eaf_awrite
end interface

interface
 function ppidd_eaf_read(handle, byte_offset, buff, byte_length) bind(c, name='PPIDD_Eaf_read')
 use iso_c_binding, only: c_double, c_int, c_size_t, c_ptr
 integer(c_int) ppidd_eaf_read
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset
 type(c_ptr), intent(in), value :: buff ! call ppidd_eaf_read(c_loc(f_buff), ...)
 integer(c_size_t), intent(in), value :: byte_length
 end function ppidd_eaf_read
end interface

interface
 function ppidd_eaf_aread(handle, byte_offset, buff, byte_length, request_id) bind(c, name='PPIDD_Eaf_aread')
 use iso_c_binding, only: c_double, c_int, c_size_t, c_ptr
 integer(c_int) ppidd_eaf_aread
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: byte_offset
 type(c_ptr), intent(in), value :: buff ! call ppidd_eaf_aread(c_loc(f_buff), ...)
 integer(c_size_t), intent(in), value :: byte_length
 integer(c_int), intent(out) :: request_id
 end function ppidd_eaf_aread
end interface

interface
 function ppidd_eaf_wait(handle, request_id) bind(c, name='PPIDD_Eaf_wait')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_eaf_wait
 integer(c_int), intent(in), value :: handle, request_id
 end function ppidd_eaf_wait
end interface

interface
 function ppidd_eaf_waitall(list, num) bind(c, name='PPIDD_Eaf_waitall')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_eaf_waitall
 integer(c_int), intent(in), value :: num
 integer(c_int), intent(in) :: list(num)
 end function ppidd_eaf_waitall
end interface

interface
 function ppidd_eaf_probe(request_id, status) bind(c, name='PPIDD_Eaf_probe')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_eaf_probe
 integer(c_int), intent(in), value :: request_id
 integer(c_int), intent(out) :: status
 end function ppidd_eaf_probe
end interface

interface
 function ppidd_eaf_close(handle) bind(c, name='PPIDD_Eaf_close')
 use iso_c_binding, only: c_int
 integer(c_int) ppidd_eaf_close
 integer(c_int), intent(in), value :: handle
 end function ppidd_eaf_close
end interface

interface
 function ppidd_eaf_delete(name) bind(c, name='PPIDD_Eaf_delete')
 use iso_c_binding, only: c_char, c_int
 integer(c_int) ppidd_eaf_delete
 character(c_char), intent(in) :: name ! must be terminated by c_null_char
 end function ppidd_eaf_delete
end interface

interface
 function ppidd_eaf_length(handle, fsize) bind(c, name='PPIDD_Eaf_length')
 use iso_c_binding, only: c_double, c_int
 integer(c_int) :: ppidd_eaf_length
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(out) :: fsize
 end function ppidd_eaf_length
end interface

interface
 function ppidd_eaf_truncate(handle, offset) bind(c, name='PPIDD_Eaf_truncate')
 use iso_c_binding, only: c_double, c_int
 integer(c_int) ppidd_eaf_truncate
 integer(c_int), intent(in), value :: handle
 real(c_double), intent(in), value :: offset
 end function ppidd_eaf_truncate
end interface

interface
 subroutine ppidd_eaf_errmsg(code, message) bind(c, name='PPIDD_Eaf_errmsg')
 use iso_c_binding, only: c_int, c_char
 integer(c_int), intent(in), value :: code
 character(c_char), intent(out) :: message ! must be terminated by c_null_char
 end subroutine ppidd_eaf_errmsg
end interface

end module ppidd
