 extern void PPIDD_Initialize (int *argc, char ***argv, int impl);
 extern void PPIDD_Initialize_data ();
 extern int64_t  PPIDD_Worker_comm ();
 extern void PPIDD_Finalize ();
 extern int  PPIDD_Uses_ma ();
 extern int  PPIDD_MA_init (int dtype, int64_t stack, int64_t heap);
 extern double PPIDD_Wtime ();
 extern void PPIDD_Error (char *message, int code);
 extern void PPIDD_Helper_server (int flag, int num_per_server);
 extern void PPIDD_Nxtval (int numproc, int64_t *val);
 extern int  PPIDD_Size_all ();
 extern int  PPIDD_Size ();
 extern int  PPIDD_Rank ();
 extern void PPIDD_Init_fence ();
 extern void PPIDD_Fence ();
 extern void PPIDD_Send (void *buf, int count, int dtype, int dest, int sync);
 extern void PPIDD_Recv (void *buf, int count, int dtype, int source, int64_t *lenreal, int64_t *sourcereal, int sync);
 extern void PPIDD_Wait ();
 extern int  PPIDD_Iprobe (int tag, int source);
 extern void PPIDD_BCast (void *buffer, int count, int dtype, int root);
 extern void PPIDD_Barrier ();
 extern void PPIDD_Gsum (int dtype, void *buffer, int len, char *op);
 extern int  PPIDD_Create_irreg (char *name, int64_t *lenin, int64_t nchunk, int dtype, int storetype, int *handle);
 extern int  PPIDD_Create (char *name, int64_t lentot, int dtype, int storetype, int *handle);
 extern int  PPIDD_Destroy (int handle);
 extern int  PPIDD_Distrib (int handle, int rank, int64_t *ilo, int64_t *ihi);
 extern int  PPIDD_Location (int handle, int64_t *ilo, int64_t *ihi, int64_t *map, int64_t *proclist, int *np);
 extern int  PPIDD_Get (int handle, int64_t *ilo, int64_t *ihi, void *buff);
 extern int  PPIDD_Put (int handle, int64_t *ilo, int64_t *ihi, void *buff);
 extern int  PPIDD_Acc (int handle, int64_t *ilo, int64_t *ihi, void *buff, void *fac);
 extern int64_t PPIDD_Read_inc (int handle, int64_t inum, int64_t incr);
 extern void PPIDD_Zero_patch (int handle, int64_t ilo, int64_t ihi);
 extern int  PPIDD_Zero (int handle);
 extern void PPIDD_Inquire_name (int handle, char *name);
 extern int  PPIDD_Inquire_stype (int handle);
 extern void PPIDD_Inquire_mem (int64_t *mem_used);
 extern int  PPIDD_Create_mutexes (int storetype, int number);
 extern void PPIDD_Lock_mutex (int inum);
 extern void PPIDD_Unlock_mutex (int inum);
 extern int  PPIDD_Destroy_mutexes ();

 extern int  PPIDD_Eaf_open (char *name, int type, int *handle);
 extern int  PPIDD_Eaf_write (int handle, double byte_offset, void *buff, int64_t byte_length);
 extern int  PPIDD_Eaf_awrite (int handle, double byte_offset, void *buff, int64_t byte_length, int *request_id);
 extern int  PPIDD_Eaf_read (int handle, double byte_offset, void *buff, int64_t byte_length);
 extern int  PPIDD_Eaf_aread (int handle, double byte_offset, void *buff, int64_t byte_length, int *request_id);
 extern int  PPIDD_Eaf_wait (int handle, int request_id);
 extern int  PPIDD_Eaf_waitall (int64_t *list, int num);
 extern int  PPIDD_Eaf_probe (int request_id, int *status);
 extern int  PPIDD_Eaf_close (int handle);
 extern int  PPIDD_Eaf_delete (char *name);
 extern int  PPIDD_Eaf_length (int handle, double *fsize);
 extern int  PPIDD_Eaf_truncate (int handle, double offset);
 extern void PPIDD_Eaf_errmsg (int code, char *message);

 extern int  PPIDD_Sf_create (char *name, double size_hard_limit, double size_soft_limit, double req_size, int *handle);
 extern int  PPIDD_Sf_write (int handle, double byte_offset, double byte_length, double *buff, int64_t *request_id);
 extern int  PPIDD_Sf_read (int handle, double byte_offset, double byte_length, double *buff, int64_t *request_id);
 extern int  PPIDD_Sf_wait (int64_t request_id);
 extern int  PPIDD_Sf_waitall (int64_t *list, int num);
 extern int  PPIDD_Sf_destroy (int handle);
 extern void PPIDD_Sf_errmsg (int code, char *message);
