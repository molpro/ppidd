
 PPIDD initialized (MPI-2 version of PPIDD).

 Total procs=   4,  Nprocs(compute processes)=   3,  My proc=   0
 Performing ppidd tests.
 SUCCESSFUL TEST SHOULD END WITH ' All PPIDD tests successful.'

 Checking whether C types match Fortran types:
 The size (in bytes) of some C data types:
 Size of C float:                    4 bytes
 Size of C double:                   8 bytes
 Size of C fortint:                  8 bytes
 Size of C fortlogical:              8 bytes
 The size (in bytes) of some Fortran data types:
 Size of Fortran Real:               4 bytes
 Size of Fortran Doule Precision:    8 bytes
 Size of Fortran Integer:            8 bytes
 Size of Fortran Logical:            8 bytes
 All data types (Integer, Logical, and Double Precision) match between C and Fortran.

 Starting PPIDD basic test with GA-size=   32.00 MB (  4194304 words),  Buffer size=   16.00 MB (  2097152 words)


 (1) Array data are stored across distributed compute processes:
 ppidd has created global array: ppiddarray
 ppidd_create:     cpu=   0.0000 sec,  wall time=   0.0002 sec
 ppidd_zero:       cpu=   0.0600 sec,  wall time=   0.0599 sec
 TIME FOR LATENCY TEST PPIDD_PUT=             0.01 SEC,  LATENCY=      0.54 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_PUT=             0.01 SEC,  LATENCY=      0.44 MICROSEC
 ppidd_put(trial): cpu=   0.0270 sec,  wall time=   0.0284 sec,  speed=     3380.49 MB/sec
 ppidd_put:         total latency time=   0.0000 sec,  nopr=    20
 ppidd_put:        cpu=   0.2230 sec,  wall time=   0.2252 sec,  speed=     4263.25 MB/sec
 ppidd_put:        cpu=   0.2230 sec,  wall time=   0.2252 sec,  latency=      0.44 microsec, bandwidth=     4263.75 MB/sec
 TIME FOR LATENCY TEST PPIDD_GET=             0.01 SEC,  LATENCY=      0.45 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_GET=             0.01 SEC,  LATENCY=      0.44 MICROSEC
 ppidd_get:         total latency time=   0.0000 sec,  nopr=    20
 ppidd_get:        cpu=   0.2220 sec,  wall time=   0.2237 sec,  speed=     4291.33 MB/sec
 ppidd_get:        cpu=   0.2220 sec,  wall time=   0.2237 sec,  latency=      0.44 microsec, bandwidth=     4291.84 MB/sec
 TIME FOR LATENCY TEST PPIDD_ACC=             0.03 SEC,  LATENCY=      1.50 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_ACC=             0.03 SEC,  LATENCY=      1.55 MICROSEC
 ppidd_acc:         total latency time=   0.0001 sec,  nopr=    20
 ppidd_acc:        cpu=   0.3689 sec,  wall time=   0.3714 sec,  speed=     2584.95 MB/sec
 ppidd_acc:        cpu=   0.3689 sec,  wall time=   0.3714 sec,  latency=      1.55 microsec, bandwidth=     2585.59 MB/sec
 ppidd_destroy:    cpu=   0.0010 sec,  wall time=   0.0015 sec

 (2) Array data are stored on helper processes:
 ppidd has created global array: ppiddarray
 ppidd_create:     cpu=   0.0000 sec,  wall time=   0.0000 sec
 ppidd_zero:       cpu=   0.1160 sec,  wall time=   0.1198 sec
 TIME FOR LATENCY TEST PPIDD_PUT=             0.01 SEC,  LATENCY=      0.64 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_PUT=             0.02 SEC,  LATENCY=      1.21 MICROSEC
 ppidd_put(trial): cpu=   0.0230 sec,  wall time=   0.0300 sec,  speed=     3197.67 MB/sec
 ppidd_put:         total latency time=   0.0001 sec,  nopr=    20
 ppidd_put:        cpu=   0.1340 sec,  wall time=   0.2098 sec,  speed=     4575.29 MB/sec
 ppidd_put:        cpu=   0.1340 sec,  wall time=   0.2098 sec,  latency=      1.21 microsec, bandwidth=     4576.88 MB/sec
 TIME FOR LATENCY TEST PPIDD_GET=             0.01 SEC,  LATENCY=      0.64 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_GET=             0.02 SEC,  LATENCY=      0.81 MICROSEC
 ppidd_get:         total latency time=   0.0000 sec,  nopr=    20
 ppidd_get:        cpu=   0.2040 sec,  wall time=   0.2810 sec,  speed=     3415.88 MB/sec
 ppidd_get:        cpu=   0.2040 sec,  wall time=   0.2810 sec,  latency=      0.81 microsec, bandwidth=     3416.47 MB/sec
 TIME FOR LATENCY TEST PPIDD_ACC=             0.01 SEC,  LATENCY=      0.66 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_ACC=             0.01 SEC,  LATENCY=      0.64 MICROSEC
 ppidd_acc:         total latency time=   0.0000 sec,  nopr=    20
 ppidd_acc:        cpu=   0.5839 sec,  wall time=   0.7111 sec,  speed=     1350.11 MB/sec
 ppidd_acc:        cpu=   0.5839 sec,  wall time=   0.7111 sec,  latency=      0.64 microsec, bandwidth=     1350.19 MB/sec
 ppidd_destroy:    cpu=   0.0070 sec,  wall time=   0.0075 sec

 TIME FOR LATENCY TEST PPIDD_SEND/RECV=       0.03 SEC,  LATENCY=      0.21 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_SEND/RECV=       0.03 SEC,  LATENCY=      0.20 MICROSEC
 ppidd_send/recv:   total latency time=   0.0000 sec,  nopr=    20
 ppidd_send/recv:  cpu=   0.0520 sec,  wall time=   0.0626 sec,  speed=     5113.70 MB/sec
 ppidd_send/recv:  cpu=   0.0520 sec,  wall time=   0.0626 sec,  latency=      0.20 microsec, bandwidth=     5114.03 MB/sec
 TIME FOR LATENCY TEST PPIDD_BRDCST=          0.04 SEC,  LATENCY=      0.41 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_BRDCST=          0.04 SEC,  LATENCY=      0.39 MICROSEC
 ppidd_brdcst:      total latency time=   0.0001 sec,  nopr=   180
 ppidd_brdcst:     cpu=   1.2738 sec,  wall time=   1.4527 sec,  speed=     1762.27 MB/sec
 ppidd_brdcst:     cpu=   1.2738 sec,  wall time=   1.4527 sec,  latency=      0.39 microsec, bandwidth=     1762.36 MB/sec
 TIME FOR LATENCY TEST PPIDD_GSUM=            0.07 SEC,  LATENCY=      1.04 MICROSEC (trial test)
 TIME FOR LATENCY TEST PPIDD_GSUM=            0.07 SEC,  LATENCY=      0.98 MICROSEC
 ppidd_gsum:        total latency time=   0.0000 sec,  nopr=    20
 ppidd_gsum:       cpu=   0.9169 sec,  wall time=   0.9296 sec,  speed=      344.22 MB/sec
 ppidd_gsum:       cpu=   0.9169 sec,  wall time=   0.9296 sec,  latency=      0.98 microsec, bandwidth=      344.23 MB/sec

 Time spent on ppidd_basictest:                  cpu=          4.6833 sec,  wall time=          5.2162 sec

 PPIDD mutex tests:

 Total time on calling get_current_times:        cpu=        0.190971 sec,  wall time=        0.191552 sec
 Total number of calling get_current_times:        1000000
 Average time per get_current_times calling:     cpu=       191.0 nanosec,  wall time=       191.6 nanosec

 Total time on calling ppidd_wtime    1000000  times:                       wall time=        0.042271 sec
 Average time per ppidd_wtime calling:                                      wall time=        42.3 nanosec


 1. Mutex data are stored on compute process, and mutex is implemented through RMA operations:
 (1) PPIDD mutex test with computing tasks:
 Nprocs=         3  Total tasks=                 48
  IPROC      TASKS      WTime/task(Sec)
     0          16         0.211374566
     1          16         0.211374626
     2          16         0.211374566
 Time spent for iprocs=0:                        cpu=        3.369488 sec,  wall time=        3.381993 sec
 Time spent for each proc(average):              cpu=        3.200180 sec,  wall time=        3.381993 sec
 Average time per task:                          cpu=        0.066670 sec,  wall time=        0.070458 sec

 (2) Distribute computing tasks to all processes without mutex, but ensure only one process is allowed to do the computation at a time:
 Nprocs=         3  Total tasks=                 48
  IPROC      TASKS      WTime/task(Sec)
     0          16         0.209646001
     1          16         0.209646001
     2          16         0.209646001
 Time spent for iprocs=0:                        cpu=        3.341492 sec,  wall time=        3.354336 sec
 Time spent for each proc(average):              cpu=        3.184183 sec,  wall time=        3.354336 sec
 Average time per computing task:                cpu=        0.066337 sec,  wall time=        0.069882 sec

 Comparing the time between (1) and (2), we also get the approximate average time per lock/unlock calling:
                                                                            wall time=    576194.8 nanosec
 This data probably can be used to evaluate the mutex only if the number of tasks is large enough.

 (3) PPIDD mutex test without computing tasks:
 Nprocs=         3  Total tasks=              30000
  IPROC      TASKS      WTime/task(Sec)
     0       10000         0.000006058
     1       10000         0.000006058
     2       10000         0.000006058
 Time spent for iprocs=0:                        cpu=        0.058990 sec,  wall time=        0.060579 sec
 Time spent for each proc(average):              cpu=        0.057324 sec,  wall time=        0.060582 sec
 Average time per lock/unlock calling:           cpu=      1910.8 nanosec,  wall time=      2019.4 nanosec
 The data in (3) can be used to evaluate the mutex since all callings are evenly distributed to all processes.

 2. Mutex data are stored on helper process, and mutex is implemented on top of two-sided operations:
 (1) PPIDD mutex test with computing tasks:
 Nprocs=         3  Total tasks=                 48
  IPROC      TASKS      WTime/task(Sec)
     0          16         0.211550251
     1          16         0.211456001
     2          16         0.211550370
 Time spent for iprocs=0:                        cpu=        3.345492 sec,  wall time=        3.384804 sec
 Time spent for each proc(average):              cpu=        3.209846 sec,  wall time=        3.384302 sec
 Average time per task:                          cpu=        0.066872 sec,  wall time=        0.070506 sec

 (2) Distribute computing tasks to all processes without mutex, but ensure only one process is allowed to do the computation at a time:
 Nprocs=         3  Total tasks=                 48
  IPROC      TASKS      WTime/task(Sec)
     0          16         0.227302060
     1          16         0.227302060
     2          16         0.227633685
 Time spent for iprocs=0:                        cpu=        3.513465 sec,  wall time=        3.636833 sec
 Time spent for each proc(average):              cpu=        3.286167 sec,  wall time=        3.638602 sec
 Average time per computing task:                cpu=        0.068462 sec,  wall time=        0.075804 sec

 Comparing the time between (1) and (2), we also get the approximate average time per lock/unlock calling:
                                                                            wall time=  -5297909.2 nanosec
 This data probably can be used to evaluate the mutex only if the number of tasks is large enough.

 (3) PPIDD mutex test without computing tasks:
 Nprocs=         3  Total tasks=              30000
  IPROC      TASKS      WTime/task(Sec)
     0       10000         0.000003549
     1       10000         0.000003549
     2       10000         0.000003549
 Time spent for iprocs=0:                        cpu=        0.034994 sec,  wall time=        0.035491 sec
 Time spent for each proc(average):              cpu=        0.029996 sec,  wall time=        0.035490 sec
 Average time per lock/unlock calling:           cpu=       999.9 nanosec,  wall time=      1183.0 nanosec
 The data in (3) can be used to evaluate the mutex since all callings are evenly distributed to all processes.

 Time spent on ppidd_mutex_test:                 cpu=         13.9469 sec,  wall time=         14.1358 sec

 PPIDD shared counter tests:
 (1) PPIDD shared counter test with computing tasks:
 Nprocs=         3  Total tasks=                 50
  IPROC      TASKS      WTime/task(Sec)
     0          17         0.072153232
     1          19         0.066745783
     2          14         0.090551785
 Time spent for iprocs=0:                        cpu=        1.127829 sec,  wall time=        1.226605 sec
 Sum of time for all procs all tasks:            cpu=        3.318495 sec,  wall time=        3.762500 sec
 Sum of time for all procs all computations:                                wall time=        3.761387 sec
 Sum of time for all procs all counter callings:                            wall time=        0.001113 sec
 Average time per task:                          cpu=        0.066370 sec,  wall time=        0.075250 sec
 Average time per computation:                                              wall time=        0.075228 sec
 Average time per shared counter calling:                                   wall time=     22258.8 nanosec

 (2) Distribute computing tasks to processes without shared counter:
 Nprocs=         3  Total tasks=                 50
  IPROC      TASKS      WTime/task(Sec)
     0          16         0.066527948
     1          17         0.066615946
     2          17         0.067412713
 Time spent for iprocs=0:                        cpu=        1.060841 sec,  wall time=        1.064447 sec
 Sum of time for all procs all computing tasks:  cpu=        3.315498 sec,  wall time=        3.342934 sec
 Average time per computing task:                cpu=        0.066310 sec,  wall time=        0.066859 sec

 Comparing the times between (1) and (2), we also get the approximate average time per counter calling:
                                                                            wall time=   8391308.8 nanosec
 This data probably can not be used to evaluate the shared counter since some extra overhead is included.

 (3) PPIDD shared counter test without computing tasks:
 Nprocs=         3  Total tasks=            1000000
  IPROC      TASKS      WTime/task(Sec)
     0      335652         0.000000704
     1      332455         0.000000708
     2      331893         0.000000712
 Time spent for iprocs=0:                        cpu=        0.234964 sec,  wall time=        0.236366 sec
 Sum of time for all procs all empty tasks:      cpu=        0.701895 sec,  wall time=        0.707987 sec
 Average time per shared counter calling:        cpu=       701.9 nanosec,  wall time=       708.0 nanosec
 The data in (3) probably can not be used to evaluate the shared counter since all callings may concentrate on some processes.
 The data in (1) are much better.

 Time spent on ppidd_sharedcounter_test:         cpu=          2.5496 sec,  wall time=          2.6538 sec

 All PPIDD tests successful.
